---
title: "Class 6: R functions"
author: "Saba Heydari Seradj (PID: A17002175)"
format: pdf
editor: visual
---

Today we are going to explore R functions and begin to think about writing our own functions.

Let's start simple and write our first function to add some numbers.

Every function in R has at least 3 things:

-   a **name**, we pick this

-   one or more input **arguments**

-   the **body**, where the work gets done

Writing a simple 'add' function. Setting y as zero for default.

```{r}
add <- function(x,y=0){
  x+y
}
```

Now let's try it out

```{r}
add(c(10,1,1,10),1)


```

```{r}
add(10)
```

## Lab sheet work					

> **Q1.** Write a function grade() to determine an overall grade from a vector of student homework
> assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
> NA value) this can be used as a score to be potentially dropped. Your final function should be
> adquately explained with code comments and be able to work on an example class gradebook
> such as this one in CSV format: “https://tinyurl.com/gradeinput” \[**3pts**\]

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

Begin by calculating the average for student1.

```{r}
student1
mean(student1)
```

But, we want to stop the lowest score from a given student's set of scores.

```{r}
mean(student1[-which.min(student1)])
```

This code will set the NA values to 0. Then we can drop the lowest value.

```{r}
student2
# make an alias so we don't override the original vector.
student2_clean <- student2
# find NAs in 'x' and make them 0
student2_clean[is.na(student2_clean)] <- 0
student2_clean
# finds the min value and removes it before getting mean
mean(student2_clean)
mean(student2_clean[-which.min(student2_clean)])
```

So far we have a working snippet,

```{r}
student3
# make an alias so we don't override the original vector.
x <- student3
# find NAs in 'x' and make them 0
x[is.na(x)] <- 0
x
# finds the min value and removes it before getting mean
mean(x)
mean(x[-which.min(x)])
```

Now turn it into a function

```{r}
grade <- function(x){
  # find NAs in 'x' and make them 0
  x[is.na(x)] <- 0
  # finds the min value and removes it before getting mean
  mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

```{r}
gradebook <- data.frame(student1,student2,student3)
gradebook <- t(gradebook)
final_grades <- apply(gradebook, 1, grade)
final_grades
```

I read the csv file for the 'gradebook'.

```{r}
gradebook <- read.csv('https://tinyurl.com/gradeinput',row.names=1)
head(gradebook)
```

To use the apply() function on this 'gradebook' dataset, I need to decide whether I want to apply the grade function over the rows (1) or columns (2) of the 'gradebook'. Students are rows, so I need to assign margin=1.

```{r}
grades <- apply(gradebook, 1, grade)
head(grades)
```

> **Q2.** Using your grade() function and the supplied gradebook, Who is the top scoring student
> overall in the gradebook? \[**3pts**\]

```{r}
grades[which.max(grades)]
```

**Student 18** is the top scoring student overall in the gradebook.

> **Q3.** From your analysis of the gradebook, which homework was toughest on students (i.e. obtained
> the lowest scores overall? \[**2pts**

```{r}
homework <- apply(gradebook, 2, grade)
homework
homework[which.min(homework)]
```

Using this strategy homework 2 is the most difficult.

```{r}
apply(gradebook,2,mean,na.rm=T)
```

Using this strategy homework 3 and 2 are low, with homework 3 being very slightly lower.

```{r}
masked_gradebook <- gradebook
masked_gradebook[is.na(masked_gradebook)] <- 0
apply(masked_gradebook,2,mean)
```

Using this third strategy, homework 2 is lowest.

Modifying our original function so that it takes another argument so we can choose whether or not we want to drop the lowest score.

```{r}
grade2 <- function(x, drop.low=T){
  # find NAs in 'x' and make them 0
  x[is.na(x)] <- 0
  if(drop.low){
    cat('Hello low')
    # finds the min value and removes it before getting mean
    out <- mean(x[-which.min(x)])
  } else{
    out <- mean(x)
    cat('No low')
  }
  return(out)
}
```

```{r}
grade2(student1,drop.low=F)
```

> **Q4.** Optional Extension: From your analysis of the gradebook, which homework was most
> predictive of overall score (i.e. highest correlation with average grade score)? \[**1pt**\]

The function to calculate correlations in R is 'cor()'.

```{r}
cor(grades, masked_gradebook$hw5)
```

I want to apply the cor function over the 'masked_gradebook' and use the grades for the class.

```{r}
apply(masked_gradebook,2,cor,y=grades)
```

**Homework 5** is most predictive of overall score of students, as it had the highest correlation with students' average score.
